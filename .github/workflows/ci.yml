name: CI

on:
  push:
    branches:
      - ha/github-ci

env:
  CI: true
  BUILDKITE: true
  RAILS_ENV: test
  RACK_ENV: test
  MYSQL_HOST: 127.0.0.1
  MYSQL_PORT: 3306
  REDIS_HOST: redis
  REDIS_PORT: 6379
  PGHOST: 127.0.0.1
  PGUSER: postgres
  PGPORT: 5432
  BUNDLE_DEPLOYMENT: false
  BEANSTALK_URL: "beanstalk://127.0.0.1:11300"
  RABBITMQ_URL: "amqp://guest:guest@127.0.0.1:5672"
  QC_DATABASE_URL: "postgres://postgres@127.0.0.1/active_jobs_qc_int_test"
  # Sauce Labs username and access key. Obfuscated, purposefully not encrypted.
  ENCODED: "U0FVQ0VfQUNDRVNTX0tFWT1hMDM1MzQzZi1lOTIyLTQwYjMtYWEzYy0wNmIzZWE2MzVjNDggU0FVQ0VfVVNFUk5BTUU9cnVieW9ucmFpbHM="

jobs:
  test:
    name: Ruby ${{ matrix.ruby }} - ${{ matrix.framework }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres:alpine
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      selenium:
        image: selenium/standalone-chrome:latest
        ports:
          - 4444:4444
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        ruby: [head, head_yjit]
        framework: [actioncable, actionmailbox, actionmailer, actionpack, actiontext, actionview, activemodel, activerecord_sqlite3, activerecord_mysql2, activerecord_trilogy, activerecord_postgresql, activestorage, activesupport, railties, actioncable_integration, actionview_ujs, activejob_integration, actiontext_integration, guides]
    outputs:
      data: ${{ steps.create_steps.outputs.data }}

    steps:
      - uses: actions/checkout@v3

      - name: Create steps
        id: create_steps
        run: |
          declare -A data=(
            ["actioncable"]="test,default"
            ["actionmailbox "]="test,default"
            ["actionmailer"]="test,default"
            ["actionpack"]="test,default"
            ["actiontext"]="test,default"
            ["actionview"]="test,default"
            ["activejob"]="test,default"
            ["activemodel"]="test,default"
            ["activerecord_sqlite3"]="sqlite3:test,default"
            ["activerecord_mysql2"]="db:mysql:rebuild,mysql2:test,mysqldb"
            ["activerecord_trilogy"]="db:mysql:rebuild,trilogy:test,mysqldb"
            ["activerecord_postgresql"]="db:postgresql:rebuild,postgresql:test,postgresdb"
            ["activestorage"]="test,default"
            ["activesupport"]="test,default"
            ["railties"]="test,default"
            ["actioncable_integration"]="test:integration,default"
            ["actionview_ujs"]="test:ujs,default"
            ["activejob_integration"]="test:integration,default"
            ["actiontext_integration"]="test:system,default"
            ["guides"]="test,default"
          )

          echo "frameworks_data=${data[${{ matrix.framework }}]}" >> "$GITHUB_ENV"

      - name: Install dependencies
        run: |
          codename="$(. /etc/os-release; x="${VERSION_CODENAME-${VERSION#*(}}"; echo "${x%%[ )]*}")"
          if ! which gpg || ! which curl; then \
            apt-get update \
            && apt-get install -y --no-install-recommends \
                gnupg curl; \
          fi
          # Postgres apt sources
          sudo curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
          sudo add-apt-repository "deb http://apt.postgresql.org/pub/repos/apt/ ${codename}-pgdg main"
          # Node apt sources
          sudo  curl -sS https://deb.nodesource.com/gpgkey/nodesource.gpg.key | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
          sudo add-apt-repository "deb http://deb.nodesource.com/node_18.x ${codename} main"
          # Yarn apt sources
          sudo curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=1 sudo apt-key add -
          sudo add-apt-repository "deb http://dl.yarnpkg.com/debian/ stable main"
          # Install dependencies
          sudo apt-get install -y --no-install-recommends \
          imagemagick \
          postgresql-client \
          libmysqlclient-dev \
          default-mysql-client \
          sqlite3 \
          nodejs \
          yarn \
          ffmpeg \
          mupdf \
          mupdf-tools \
          poppler-utils \
          libvips-dev \
          libwebp-dev \
          beanstalkd

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby%_yjit }}
          bundler-cache: false
          rubygems: latest
          bundler: latest
        env:
          RUBY_YJIT_ENABLE: ${{ matrix.ruby == 'head_yjit' && 'true' || 'false' }}

      - name: Install bundler dependencies
        run: bundle config unset deployment && bundle install --jobs 4 --retry 3
        timeout-minutes: 3

      - name: Set up Redis
        uses: supercharge/redis-github-action@1.2.0

      - name: Set up Memcached
        uses: niden/actions-memcached@v7

      - name: Start RabbitMQ container
        if: ${{ matrix.framework == 'activejob_integration'}}
        run: |
          docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest rabbitmq:alpine

      - name: MYSQL - Grant all privileges to rails user
        run: |
          mysql -h 127.0.0.1 -P 3306 -u root -e "
            create user 'rails'@'%';
            grant all privileges on activerecord_unittest.* to rails@'%';
            grant all privileges on activerecord_unittest2.* to rails@'%';
            grant all privileges on inexistent_activerecord_unittest.* to rails@'%';
            create database activerecord_unittest default character set utf8mb4;
            create database activerecord_unittest2 default character set utf8mb4;
          "

      - name: npm install
        timeout-minutes: 3
        run: npm install

      - name: ${{ matrix.framework }}
        run: |
          framework=$(echo "${{ matrix.framework }}" | cut -d_ -f1)
          cd $framework
          echo "frameworks_data: $frameworks_data"
          instructions=$(echo $frameworks_data | sed 's/,[^,]*$//')
          if [[ $instructions == *,* ]]; then
            instructions=$(echo "$instructions" | sed 's/,/ \&\& bundle exec rake /g')
          fi
          instructions="bundle exec rake $instructions"
          echo "instructions: $instructions"
          eval $instructions
